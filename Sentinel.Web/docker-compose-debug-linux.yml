version: '3.4'

services:
  sentinel-web-api-product:      
    image: sentinel-web-api-product:01-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.Api.Product/dockerfile-linux
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - C:\repos\sentinel\Sentinel.Web:/src
    #stdin_open: true
    #tty: true
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5003:80"
    depends_on:
      - sentinel-db-redis
  sentinel-web-sts:      
    image: sentinel-web-sts:01-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.STS/dockerfile-linux
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - C:\repos\sentinel\Sentinel.Web:/src
    #stdin_open: true
    #tty: true
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5000:80"
    #depends_on:
    #  - sqldb
  sentinel-web-admin:      
    image: sentinel-web-admin:01-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.Admin/dockerfile
    volumes:
      - C:\repos\sentinel\Sentinel.Web\Sentinel.Web.Admin:/var/www/html
    #entrypoint: ng serve --host 0.0.0.0 --poll 1 --disable-host-check
    entrypoint: npm run startdocker
    ports:
      - "4200:4200"  
    deploy:
      resources:
        reservations:
          memory: 2G 
  sqldb:
    image: sentinel-sql-db:01-dev-linux
    build:
      context: ./Sentinel.Sql.Db/
      dockerfile: dockerfile-linux
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "Sentinel2018"
      ACCEPT_EULA: "Y"
    healthcheck:
      test: sqlcmd -S sqldb -U SA -P 'Sentinel2018' -Q 'select 1'
    # networks:
    #   mynetwork:
    #     aliases:
    #       - db1.internal.prod.example.com
  sentinel-db-redis:
    image: sentinel-db-redis:01-dev-linux
    build:
      context: ./Sentinel.Db.Redis
      dockerfile: dockerfile
    # volumes:
    #   - C:\repos\sentinel\Sentinel.Web\Sentinel.Db.Redis:/data   
    # command: redis-server --requirepass yourpassword
    # command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    ports:
      - "6379:6379"
    # networks:
    #   - redis-net
  sentinel-db-mongodb:
    image: mongo:latest
    container_name: "sentinel-db-mongodb"
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    # volumes:
    #   - ./data/db:/data/db
    hostname: mongodb
    ports:
        - 27017:27017
    command: mongod --smallfiles --logpath=/dev/null # --quiet
 
# networks:
#   default:
#     external:
#       name: nat

# volumes:
#   Sentinel2018Web:
#     driver_opts:
#       type: 'none'
#       o: 'bind'
#       #device: 'C:\repos\sentinel\Sentinel.Web'
#       device: '/c/repos/sentinel/sentinel.web'
