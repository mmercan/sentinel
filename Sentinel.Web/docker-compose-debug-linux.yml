version: '3.4'

services:
  sentinel-api-product:      
    image: sentinel-api-product:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Api.Product/dockerfile-linux
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - Mongodb__ConnectionString=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - Mongodb__DatabaseName=sentinel
      - Mongodb__CollectionName=product
      - Mongodb__IdField=Id
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - .:/src
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5003:80"
    # stdin_open: true
    # tty: true
  sentinel-api-member:      
    image: sentinel-api-member:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Api.Member/dockerfile-linux
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - Mongodb__ConnectionString=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - Mongodb__DatabaseName=sentinel
      - Mongodb__CollectionName=product
      - Mongodb__IdField=Id
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    volumes:
      - .:/src
      #- C:\repos\sentinel\Sentinel.Web:/src
    #stdin_open: true
    #tty: true
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5002:80"
    # depends_on:
    #   - sentinel-db-redis
  sentinel-api-comms:      
    image: sentinel-api-comms:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Api.Comms/dockerfile-linux
    environment:
      - NATS_URL=nats://sentinel-service-nats:4222/
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - MongoConnection=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - .:/src
    #  - C:\repos\sentinel\Sentinel.Web:/src
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5004:80"
    depends_on:
      - sentinel-db-redis
  sentinel-handler-comms:      
    image: sentinel-handler-comms:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Handler.Comms/dockerfile-linux
    environment:
      - NATS_URL=nats://sentinel-service-nats:4222/
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - MongoConnection=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    volumes:
      - .:/src
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    # ports:
    #   - "5004:80"
    depends_on:
      - sentinel-db-redis
  sentinel-ui-sts:      
    image: sentinel-ui-sts:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.UI.STS/dockerfile-linux
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SMTP__Server=sentinel-util-mailhog
      - SMTP__Port=1025
      - SMTP__UserName=mail@mail.com
      - SMTP__Password=password123
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - MongoConnection=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - .:/src
    #  - C:\repos\sentinel\Sentinel.Web:/src
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5000:80"
    #depends_on:
    #  - sqldb
  sentinel-ui-admin:      
    image: sentinel-ui-admin:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.UI.Admin/dockerfile
    volumes:
      - .\Sentinel.UI.Admin:/var/www/html
    #entrypoint: ng serve --host 0.0.0.0 --poll 1 --disable-host-check
    entrypoint: npm run startdocker
    ports:
      - "4200:4200"  
  sentinel-elk-proxy:      
    image: sentinel-elk-proxy:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.elk.Proxy
      dockerfile: dockerfile
    ports:
      - "80:80"
      - "8080:8080"
      - "8081:8081"

  # sentinel-sql-db:
  #   image: sentinel-sql-db:01-dev-linux
  #   build:
  #     context: ./Sentinel.Db.Sql/
  #     dockerfile: dockerfile-linux
  #   ports:
  #     - "1433:1433"
  #   environment:
  #     SA_PASSWORD: "P@ssword1$"
  #     ACCEPT_EULA: "Y"
  #   healthcheck:
  #     test: sqlcmd -S sqldb -U SA -P 'P@ssword1$' -Q 'select 1'
  sentinel-db-redis:
    image: sentinel-db-redis:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Db.Redis
      dockerfile: dockerfile
    # volumes:
    #   - C:\repos\sentinel\Sentinel.Web\Sentinel.Db.Redis:/data   
    # command: redis-server --requirepass yourpassword
    # command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    ports:
      - "6379:6379"
    # networks:
    #   - redis-net
  sentinel-db-elasticsearch:
    image: sentinel-db-elasticsearch:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Db.Elasticsearch
      dockerfile: dockerfile-linux
    ports:
      - "9200:9200"
      - "9300:9300"
  sentinel-db-mongodb:
    image: sentinel-db-mongodb:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Db.Mongodb
      dockerfile: dockerfile-linux
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=hbMnztmZ4w9JJTGZ
    volumes:
      - mongodata:/data/db
    ports:
        - 27017:27017
  sentinel-service-nats:
    image: sentinel-service-nats:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Service.Nats
      dockerfile: dockerfile-linux
    ports:
      - "8222:8222"
      - "4222:4222"
  sentinel-service-rabbitmq:
    image: sentinel-service-rabbitmq:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Service.Rabbitmq
      dockerfile: dockerfile-linux
    labels:
      NAME: "rabbitmq1"
    environment:
       RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
    #   RABBITMQ_DEFAULT_USER: "rabbitmq"
    #   RABBITMQ_DEFAULT_PASS: "rabbitmq"
    #   RABBITMQ_DEFAULT_VHOST: "/"
    # volumes:
      # - ./config/:/etc/rabbitmq/
      # - "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
      # - "./autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
    ports:
    - "15672:15672"
    - "5672:5672"
  sentinel-util-mailhog:
    image: sentinel-util-mailhog:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Mailhog
      dockerfile: dockerfile-linux
    ports:
      - "1025:1025"
      - "8025:8025"
  sentinel-util-kibana:
    image: sentinel-util-kibana:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Kibana
      dockerfile: dockerfile-linux
    environment:
      - ELASTICSEARCH_URL=http://sentinel-db-elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - sentinel-db-elasticsearch
  sentinel-elk-logstash:
    image: sentinel-elk-logstash:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.elk.Logstash
      dockerfile: dockerfile-linux
    environment:
      - ELASTICSEARCH_URL=http://sentinel-db-elasticsearch:9200
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - sentinel-db-elasticsearch
  sentinel-util-zookeeper:
    image: sentinel-util-zookeeper:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Kafka
      dockerfile: dockerfile-zookeeper
    ports:
      - 2181:2181
  sentinel-util-kafka:
    image: sentinel-util-kafka:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Kafka
      dockerfile: dockerfile-kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: sentinel-util-zookeeper:2181/local
      KAFKA_ADVERTISED_HOST_NAME: sentinel-util-kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "test-topic:2:1,test-topic2:1:1,test-topic3:1:1"
  sentinel-util-kafka-manager:
    image: sentinel-util-kafka-manager:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Kafka
      dockerfile: dockerfile-manager
    ports:
      - 9000:9000
  sentinel-util-kafka-burrow:
    build:
      context: ./Sentinel.Util.Kafka/Burrow
      dockerfile: Dockerfile
    # volumes:
    #   - ${PWD}/docker-config:/etc/burrow/
    #   - ${PWD}/tmp:/var/tmp/burrow
    ports:
      - 8000:8000
    depends_on:
      - sentinel-util-zookeeper
      - sentinel-util-kafka
    restart: always
  sentinel-util-kafka-landoop:
    image: sentinel-util-kafka-landoop:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Kafka
      dockerfile: dockerfile-linux-landoop
    ports:
      - "8000:8000"
  sentinel-util-kafka-monitor:
    build:
      context: ./Sentinel.Util.Kafka
      dockerfile: dockerfile-monitor
    ports:
      - 8000:8000
    depends_on:
      - sentinel-util-zookeeper
      - sentinel-util-kafka
volumes:
  mongodata:
# networks:
#   default:
#     external:
#       name: nat

# volumes:
#   Sentinel2018Web:
#     driver_opts:
#       type: 'none'
#       o: 'bind'
#       #device: 'C:\repos\sentinel\Sentinel.Web'
#       device: '/c/repos/sentinel/sentinel.web'
