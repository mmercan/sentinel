version: '3.4'

services:
  sentinel-web-api-product:      
    image: sentinel-web-api-product:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.Api.Product/dockerfile-linux
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - Mongodb__ConnectionString=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - Mongodb__DatabaseName=sentinel
      - Mongodb__CollectionName=product
      - Mongodb__IdField=Id
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - .:/src
      #- C:\repos\sentinel\Sentinel.Web:/src
    #stdin_open: true
    #tty: true
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5003:80"
    depends_on:
      - sentinel-db-redis
  sentinel-web-api-comms:      
    image: sentinel-web-api-comms:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.Api.Comms/dockerfile-linux
    environment:
      - NATS_URL=nats://sentinel-nats:4222/
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - MongoConnection=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - .:/src
    #  - C:\repos\sentinel\Sentinel.Web:/src
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5004:80"
    depends_on:
      - sentinel-db-redis
  sentinel-web-handler-comms:      
    image: sentinel-web-handler-comms:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.Handler.Comms/dockerfile-linux
    environment:
      - NATS_URL=nats://sentinel-nats:4222/
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - MongoConnection=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    volumes:
      - .:/src
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    # ports:
    #   - "5004:80"
    depends_on:
      - sentinel-db-redis
  sentinel-web-sts:      
    image: sentinel-web-sts:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.STS/dockerfile-linux
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SMTP__Server=sentinel-util-mailhog
      - SMTP__Port=1025
      - SMTP__UserName=mail@mail.com
      - SMTP__Password=password123
      - RedisConnection=sentinel-db-redis:6379,defaultDatabase=2,password=yourpassword
      - MongoConnection=mongodb://root:hbMnztmZ4w9JJTGZ@sentinel-db-mongodb:27017/admin?readPreference=primary
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_RUNNING_IN_CONTAINER=true
      - SentinelConnection=Server=sqldb;Database=sentinel;User Id=sa;Password=Sentinel2018;
    # volumes:
    #   - SentinelWeb:/src
    volumes:
      - .:/src
    #  - C:\repos\sentinel\Sentinel.Web:/src
    entrypoint: dotnet watch run --verbose --no-launch-profile --configuration Debug
    ports:
      - "5000:80"
    #depends_on:
    #  - sqldb
  sentinel-web-admin:      
    image: sentinel-web-admin:${TAGVersion}-dev-linux
    build:
      target: develop
      context: .
      dockerfile: Sentinel.Web.Admin/dockerfile
    volumes:
      - .\Sentinel.Web.Admin:/var/www/html
    #entrypoint: ng serve --host 0.0.0.0 --poll 1 --disable-host-check
    entrypoint: npm run startdocker
    ports:
      - "4200:4200"  
  sentinel-elk-proxy:      
    image: sentinel-elk-proxy:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.elk.Proxy
      dockerfile: dockerfile
    ports:
      - "80:80"
      - "8080:8080"
      - "8081:8081"

  # sentinel-sql-db:
  #   image: sentinel-sql-db:01-dev-linux
  #   build:
  #     context: ./Sentinel.Sql.Db/
  #     dockerfile: dockerfile-linux
  #   ports:
  #     - "1433:1433"
  #   environment:
  #     SA_PASSWORD: "P@ssword1$"
  #     ACCEPT_EULA: "Y"
  #   healthcheck:
  #     test: sqlcmd -S sqldb -U SA -P 'P@ssword1$' -Q 'select 1'
  sentinel-db-redis:
    image: sentinel-db-redis:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Db.Redis
      dockerfile: dockerfile
    # volumes:
    #   - C:\repos\sentinel\Sentinel.Web\Sentinel.Db.Redis:/data   
    # command: redis-server --requirepass yourpassword
    # command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    ports:
      - "6379:6379"
    # networks:
    #   - redis-net
  sentinel-db-elasticsearch:
    image: sentinel-db-elasticsearch:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Db.Elasticsearch
      dockerfile: dockerfile-linux
    ports:
      - "9200:9200"
      - "9300:9300"
  sentinel-db-mongodb:
    image: sentinel-db-mongodb:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Db.Mongodb
      dockerfile: dockerfile-linux
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=hbMnztmZ4w9JJTGZ
    volumes:
      - mongodata:/data/db
    ports:
        - 27017:27017
  sentinel-nats:
    image: sentinel-nats:${TAGVersion}-dev-linux
    build:
      context: ./sentinel-nats
      dockerfile: dockerfile-linux
    ports:
      - "8222:8222"
      - "4222:4222"
  sentinel-util-mailhog:
    image: sentinel-util-mailhog:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Mailhog
      dockerfile: dockerfile-linux
    ports:
      - "1025:1025"
      - "8025:8025"
  sentinel-util-kibana:
    image: sentinel-util-kibana:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.Util.Kibana
      dockerfile: dockerfile-linux
    environment:
      - ELASTICSEARCH_URL=http://sentinel-db-elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - sentinel-db-elasticsearch
  sentinel-elk-logstash:
    image: sentinel-elk-logstash:${TAGVersion}-dev-linux
    build:
      context: ./Sentinel.elk.Logstash
      dockerfile: dockerfile-linux
    environment:
      - ELASTICSEARCH_URL=http://sentinel-db-elasticsearch:9200
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - sentinel-db-elasticsearch
volumes:
  mongodata:
# networks:
#   default:
#     external:
#       name: nat

# volumes:
#   Sentinel2018Web:
#     driver_opts:
#       type: 'none'
#       o: 'bind'
#       #device: 'C:\repos\sentinel\Sentinel.Web'
#       device: '/c/repos/sentinel/sentinel.web'
