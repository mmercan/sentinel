/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.18.5.0 (NJsonSchema v9.10.67.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IProductCRUDService {
    /**
     * isalive
     * @param api_version (optional) 
     * @return Success
     */
    apiHealthCheckIsaliveGet(api_version: string | null | undefined): Observable<void>;
    /**
     * isaliveandwell
     * @param api_version (optional) 
     * @return Success
     */
    apiHealthCheckIsaliveandwellGet(api_version: string | null | undefined): Observable<void>;
    /**
     * @param api_version (optional) 
     * @return Success
     */
    apiProductGet(api_version: string | null | undefined): Observable<ProductInfoDtoV1[]>;
    /**
     * @param model (optional) 
     * @param api_version (optional) 
     * @return Success
     */
    apiProductPut(model: ProductInfoDtoV1 | null | undefined, api_version: string | null | undefined): Observable<void>;
    /**
     * @param model (optional) 
     * @param api_version (optional) 
     * @return Success
     */
    apiProductPost(model: ProductInfoDtoV1 | null | undefined, api_version: string | null | undefined): Observable<ProductInfoDtoV1>;
    /**
     * @param id (optional) 
     * @param api_version (optional) 
     * @return Success
     */
    apiProductDelete(id: number | null | undefined, api_version: string | null | undefined): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class ProductCRUDService implements IProductCRUDService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5003";
    }

    /**
     * isalive
     * @param api_version (optional) 
     * @return Success
     */
    apiHealthCheckIsaliveGet(api_version: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/HealthCheck/isalive";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processApiHealthCheckIsaliveGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiHealthCheckIsaliveGet(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiHealthCheckIsaliveGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData400) {
                    result400 = {};
                    for (let key in resultData400) {
                        if (resultData400.hasOwnProperty(key))
                            result400[key] = resultData400[key];
                    }
                }
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * isaliveandwell
     * @param api_version (optional) 
     * @return Success
     */
    apiHealthCheckIsaliveandwellGet(api_version: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/HealthCheck/isaliveandwell";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processApiHealthCheckIsaliveandwellGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiHealthCheckIsaliveandwellGet(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiHealthCheckIsaliveandwellGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData400) {
                    result400 = {};
                    for (let key in resultData400) {
                        if (resultData400.hasOwnProperty(key))
                            result400[key] = resultData400[key];
                    }
                }
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param api_version (optional) 
     * @return Success
     */
    apiProductGet(api_version: string | null | undefined): Observable<ProductInfoDtoV1[]> {
        let url_ = this.baseUrl + "/api/Product";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processApiProductGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiProductGet(<any>response_);
                } catch (e) {
                    return <Observable<ProductInfoDtoV1[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductInfoDtoV1[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiProductGet(response: HttpResponseBase): Observable<ProductInfoDtoV1[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProductInfoDtoV1.fromJS(item));
                }
                return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData400) {
                    result400 = {};
                    for (let key in resultData400) {
                        if (resultData400.hasOwnProperty(key))
                            result400[key] = resultData400[key] !== undefined ? resultData400[key] : [];
                    }
                }
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductInfoDtoV1[]>(<any>null);
    }

    /**
     * @param model (optional) 
     * @param api_version (optional) 
     * @return Success
     */
    apiProductPut(model: ProductInfoDtoV1 | null | undefined, api_version: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processApiProductPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiProductPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiProductPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param model (optional) 
     * @param api_version (optional) 
     * @return Success
     */
    apiProductPost(model: ProductInfoDtoV1 | null | undefined, api_version: string | null | undefined): Observable<ProductInfoDtoV1> {
        let url_ = this.baseUrl + "/api/Product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processApiProductPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiProductPost(<any>response_);
                } catch (e) {
                    return <Observable<ProductInfoDtoV1>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductInfoDtoV1>><any>_observableThrow(response_);
        }));
    }

    protected processApiProductPost(response: HttpResponseBase): Observable<ProductInfoDtoV1> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result201: any = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 ? ProductInfoDtoV1.fromJS(resultData201) : new ProductInfoDtoV1();
                return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData400) {
                    result400 = {};
                    for (let key in resultData400) {
                        if (resultData400.hasOwnProperty(key))
                            result400[key] = resultData400[key] !== undefined ? resultData400[key] : [];
                    }
                }
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductInfoDtoV1>(<any>null);
    }

    /**
     * @param id (optional) 
     * @param api_version (optional) 
     * @return Success
     */
    apiProductDelete(id: number | null | undefined, api_version: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Product?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processApiProductDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiProductDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processApiProductDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class ProductInfoDtoV1 implements IProductInfoDtoV1 {
    id?: number | undefined;
    productCode?: string | undefined;
    name?: string | undefined;
    productUrl?: string | undefined;
    active?: boolean | undefined;
    html?: string | undefined;
    descriptionHtml?: string | undefined;
    objectivesHtml?: string | undefined;
    audienceHtml?: string | undefined;
    prerequisitesHtml?: string | undefined;
    topicsHtml?: string | undefined;
    relatedHtml?: string | undefined;
    roadmapsHtml?: string | undefined;
    duration?: string | undefined;
    durationType?: string | undefined;
    createdOn?: Date | undefined;
    modifiedOn?: Date | undefined;
    technologyId?: number | undefined;
    technologyName?: string | undefined;
    technologyUrl?: string | undefined;
    vendorId?: number | undefined;
    vendorName?: string | undefined;
    vendorUrl?: string | undefined;

    constructor(data?: IProductInfoDtoV1) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.name = data["name"];
            this.productUrl = data["productUrl"];
            this.active = data["active"];
            this.html = data["html"];
            this.descriptionHtml = data["descriptionHtml"];
            this.objectivesHtml = data["objectivesHtml"];
            this.audienceHtml = data["audienceHtml"];
            this.prerequisitesHtml = data["prerequisitesHtml"];
            this.topicsHtml = data["topicsHtml"];
            this.relatedHtml = data["relatedHtml"];
            this.roadmapsHtml = data["roadmapsHtml"];
            this.duration = data["duration"];
            this.durationType = data["durationType"];
            this.createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>undefined;
            this.modifiedOn = data["modifiedOn"] ? new Date(data["modifiedOn"].toString()) : <any>undefined;
            this.technologyId = data["technologyId"];
            this.technologyName = data["technologyName"];
            this.technologyUrl = data["technologyUrl"];
            this.vendorId = data["vendorId"];
            this.vendorName = data["vendorName"];
            this.vendorUrl = data["vendorUrl"];
        }
    }

    static fromJS(data: any): ProductInfoDtoV1 {
        data = typeof data === 'object' ? data : {};
        let result = new ProductInfoDtoV1();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["name"] = this.name;
        data["productUrl"] = this.productUrl;
        data["active"] = this.active;
        data["html"] = this.html;
        data["descriptionHtml"] = this.descriptionHtml;
        data["objectivesHtml"] = this.objectivesHtml;
        data["audienceHtml"] = this.audienceHtml;
        data["prerequisitesHtml"] = this.prerequisitesHtml;
        data["topicsHtml"] = this.topicsHtml;
        data["relatedHtml"] = this.relatedHtml;
        data["roadmapsHtml"] = this.roadmapsHtml;
        data["duration"] = this.duration;
        data["durationType"] = this.durationType;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        data["technologyId"] = this.technologyId;
        data["technologyName"] = this.technologyName;
        data["technologyUrl"] = this.technologyUrl;
        data["vendorId"] = this.vendorId;
        data["vendorName"] = this.vendorName;
        data["vendorUrl"] = this.vendorUrl;
        return data;
    }
}

export interface IProductInfoDtoV1 {
    id?: number | undefined;
    productCode?: string | undefined;
    name?: string | undefined;
    productUrl?: string | undefined;
    active?: boolean | undefined;
    html?: string | undefined;
    descriptionHtml?: string | undefined;
    objectivesHtml?: string | undefined;
    audienceHtml?: string | undefined;
    prerequisitesHtml?: string | undefined;
    topicsHtml?: string | undefined;
    relatedHtml?: string | undefined;
    roadmapsHtml?: string | undefined;
    duration?: string | undefined;
    durationType?: string | undefined;
    createdOn?: Date | undefined;
    modifiedOn?: Date | undefined;
    technologyId?: number | undefined;
    technologyName?: string | undefined;
    technologyUrl?: string | undefined;
    vendorId?: number | undefined;
    vendorName?: string | undefined;
    vendorUrl?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = function () {
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob);
        }
    });
}