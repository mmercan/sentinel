trigger:
  batch: true
  branches:
    include:
      - "*"
    exclude:
      - features/experimental/*
  paths:
    include:
      - Sentinel.Db.Sql/*
      - Helm/sentinel/charts/db-sql/*
      - devops/Sentinel.Db.Sql/azure-pipelines.yml

stages:
  - stage: build
    jobs:
      - job: A
        displayName: Build
        pool:
          name: Hosted Ubuntu 1604
        steps:
          - task: DockerCompose@0
            displayName: "Build Images"
            inputs:
              containerregistrytype: "Container Registry"
              dockerRegistryEndpoint: dockerhub
              dockerComposeFile: "Sentinel.Db.Sql/docker-compose.yml"
              dockerComposeFileArgs: "TAGVersion=01"
              action: "Build services"
              additionalImageTags: "$(Build.BuildNumber)"
              includeLatestTag: true

          - task: DockerCompose@0
            displayName: "Push Images"
            inputs:
              containerregistrytype: "Container Registry"
              dockerRegistryEndpoint: dockerhub
              dockerComposeFile: "Sentinel.Db.Sql/docker-compose.yml"
              dockerComposeFileArgs: "TAGVersion=01"
              action: "Push services"
              additionalImageTags: "$(Build.BuildNumber)"
              includeLatestTag: true

          - task: CopyFiles@2
            displayName: "Copy Helm sentinel/charts/db-sql"
            inputs:
              SourceFolder: "Helm/sentinel/charts/db-sql"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/Helm/sentinel/charts/db-sql"

          - task: CopyFiles@2
            displayName: "Copy Helm Values"
            inputs:
              SourceFolder: "Helm/values"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/Helm/values"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifacts: drop"

  - stage: deploy_to_dev
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        pool:
          vmImage: "Ubuntu-16.04"
        # creates an environment if it doesn't exist
        environment: "sentinel-dev.sentinel-dev"
        variables:
          chartName: "db-sql"
          namespace: "sentinel-dev"
          releaseName: "sentinel-dev-db-sql"
          pipelines_pipeline: '"$(Build.DefinitionName)"'
          pipelines_run: '"$(Build.BuildNumber)"'
          pipelines_pipelineId: '"$(System.DefinitionId)"'
          pipelines_project: '"$(System.TeamProject)"'
          pipelines_org: '"$(System.TeamFoundationCollectionUri)"'
          pipelines_jobName: '"$(Agent.JobName)"'
          pipelines_runuri: '"$(pipelines_org)$(pipelines_project)/_build/results?buildId=$(Build.BuildId)"'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: printenv | sort
                - task: HelmInstaller@0
                  displayName: "Install Helm 3.1.2"
                  inputs:
                    helmVersion: 3.1.2
                    checkLatestHelmVersion: false

                - task: HelmDeploy@0
                  displayName: "helm package"
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceConnection: "sentinel-dev-sentinel-dev-1589249908507"
                    namespace: $(namespace)
                    command: package
                    chartPath: "$(Pipeline.Workspace)/drop/Helm/sentinel/charts/$(chartName)"
                    chartVersion: "2.0.0-$(Build.BuildNumber)"
                    destination: "$(System.DefaultWorkingDirectory)"
                    save: false

                - task: PowerShell@2
                  inputs:
                    targetType: 'inline'
                    script: 'helm template "$ENV:PIPELINE_WORKSPACE/drop/Helm/sentinel/charts/db-sql" -f "$ENV:PIPELINE_WORKSPACE/drop/Helm/values/db-sql/dev-values.yaml"'
                    errorActionPreference: 'silentlyContinue'
                    
                - task: HelmDeploy@0
                  displayName: "helm upgrade"
                  inputs:
                    connectionType: "Kubernetes Service Connection"
                    kubernetesServiceConnection: "sentinel-dev-sentinel-dev-1589249908507"
                    namespace: $(namespace)
                    command: upgrade
                    chartType: FilePath
                    chartPath: "$(System.DefaultWorkingDirectory)/$(chartName)-2.0.0-$(Build.BuildNumber).tgz"
                    valueFile: '$(Pipeline.Workspace)/drop/Helm/values/db-sql/dev-values.yaml'
                    releaseName: "$(releaseName)"
                    overrideValues: "image.tag=$(Build.BuildNumber) --set branch=$(Build.SourceBranchName) --set azurepipelines.pipeline=$(pipelines_pipeline)  --set azurepipelines.run='$(pipelines_run)'  --set azurepipelines.pipelineId='$(pipelines_pipelineId)'  --set azurepipelines.project=$(pipelines_project)  --set azurepipelines.org='$(pipelines_org)'  --set azurepipelines.jobName='$(pipelines_jobName)' --set azurepipelines.runuri='$(pipelines_runuri)' "

  - stage: deploy_to_test
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        pool:
          vmImage: "Ubuntu-16.04"
        # creates an environment if it doesn't exist
        environment: "sentinel-dev.sentinel-dev"
        variables:
          chartName: "healthmonitoring-api"
          namespace: "sentinel-test"
          releaseName: "sentinel-dev-health-api"
          pipelines_pipeline: '"$(Build.DefinitionName)"'
          pipelines_run: '"$(Build.BuildNumber)"'
          pipelines_pipelineId: '"$(System.DefinitionId)"'
          pipelines_project: '"$(System.TeamProject)"'
          pipelines_org: '"$(System.TeamFoundationCollectionUri)"'
          pipelines_jobName: '"$(Agent.JobName)"'
          pipelines_runuri: '"$(pipelines_org)$(pipelines_project)/_build/results?buildId=$(Build.BuildId)"'
        strategy:
          runOnce:
            preDeploy:
              steps:
                - download: current
                  artifact: drop
                - script: echo initialize, cleanup, backup, install certs
            deploy:
              steps:
                - script: printenv | sort

            routeTraffic:
              steps:
                - script: echo routing traffic
            postRouteTraffic:
              steps:
                - script: echo health check post-route traffic
            on:
              failure:
                steps:
                  - script: echo Restore from backup! This is on failure
              success:
                steps:
                  - script: echo Notify! This is on success
